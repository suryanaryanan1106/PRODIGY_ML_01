import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import statsmodels.api as sm
import warnings
warnings.filterwarnings("ignore")
df = pd.read_csv('D:\\house\\house_data.csv')
print(df.head())
print(df.info())
target_variable = df['price']
feature_variables = df.drop(['date', 'price'], axis = 1)
df.isnull().sum()
plt.figure(figsize=(14, 10))

plt.subplot(3, 1, 1)
sns.boxplot(data = df[['bedrooms', 'bathrooms', 'floors', 'grade']], palette = 'rocket')
plt.subplot(3, 1, 2)
sns.boxplot(data = df[['sqft_living', 'sqft_lot', 'sqft_above', 'sqft_basement', 'sqft_living15']])
plt.subplot(3, 1, 3)
sns.boxplot(data = df[['price']])

plt.tight_layout()
plt.show()
Remove_Outliers = df[(df['bedrooms'] <= 15) & (df['sqft_lot'] < 1500000)]
Remove_Outliers.shape
df = Remove_Outliers
df.shape
encoder = LabelEncoder()
for col in df.select_dtypes(include=['object']).columns:
    df[col] = encoder.fit_transform(df[col])
sns.histplot(data = df, y='price', kde=True)
plt.xlabel('Number of Houses')
plt.ylabel('HousePrice')
plt.title('Distribution of House prices')
plt.show()
sns.pairplot(df)
corr = df.corr()
mask = np.triu(np.ones_like(corr, dtype=bool))
cmap = sns.diverging_palette(230, 20, as_cmap=True)
sns.heatmap(corr, mask=mask, cmap=cmap, vmax=1, vmin=-1, center=0, square=True, linewidths=.5, cbar_kws={"shrink": 1})
plt.show()
scaler = StandardScaler()
df[feature_variables.columns] = scaler.fit_transform(df[feature_variables.columns])
X = feature_variables
y = target_variable
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
# Train the model
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared:", r2)
plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred, color='b', alpha=0.5)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], linestyle='--', color='r')  # Diagonal line
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs. Predicted Prices')
plt.grid(True)
plt.show()
lm = sm.OLS(y_train,X_train).fit()
lm.summary()
